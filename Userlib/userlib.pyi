#!/usr/bin/python3
# all rights reserved to yyoud 2024. (c)
import sys
from typing import Union, Literal
from uuid import UUID

if sys.version_info[:2]<(3, 9):
    raise RuntimeWarning("Might not work for python versions older than 3.9")

T_key = Union[bytes, bytearray, memoryview]
T_quadbyte = tuple[int, int, int, int]

def process_quadbyte_based(key: T_key, quadbyte: T_quadbyte, token: T_key = None, base: Literal[16, 64] = 16) -> str: ...

class User:
    user_count: int
    existing_emails: set[str]
    users: dict[str, User]

    def __init__(self, username: str, email: str, password: str) -> None:
        self.warnings = ...
        self.login = ...
        self.id = ...
        self._algo = ...
        self.username = ...
        self.email = ...
        self.__counter = ...
        self.__hashed_password = ...
        self.__countermod = ...
        self._banned = ...
        self.bans = ...
        ...

    def __str__(self) -> str: ...

    def __eq__(self, other: object) -> bool: ...

    def __update__(self, field: str, update: str, proof: any) -> None: ...

    def __hash_password(self, password: Union[bytes, bytearray, memoryview], salting_idx: bool = ...) -> str: ...

    @property
    def hashing_fn(self) -> str: ...

    @property
    def banned(self) -> bool: ...

    @property
    def hashed_password(self) -> str: ...

    def __process_id_raw(self) -> str: ...

    def __process_key_raw(self, mode): ...

    def new_password(self, proof: str, new_password: str) -> None: ...

    def __derive_final_key(self, mode: int): ...


class Manager:
    managers_info: dict[str, Manager]
    banned_users: set[str]

    def __init__(self, key: T_key, quadbyte: T_quadbyte) -> None:
        self._key = None
        self.inspections = None
        ...

    def _verify_manager(self, key: T_key, quadbyte: T_quadbyte) -> bool: ...

    def inspect_user(self, key: T_key, quadbyte: T_quadbyte, inspected_field: str, reasoning: str, identifier: str, method: Literal["uid"] = ...) -> Union[User, None]: ...

    def ban_user(self, key: T_key, quadbyte: T_quadbyte, uid: str) -> None: ...

    def verify_user(self, key: T_key, quadbyte: T_quadbyte, idu: str, password: T_key) -> bool: ...

    @staticmethod
    def inspection_type(inspected_field: str, reasoning: str, inspected_id: str, manager_key: str) -> tuple[str, str, UUID, str, float]: ...

    @staticmethod
    def ban_type(reasoning: str, inspected_id: str, manager_key: str) -> tuple[str, UUID, str, float]: ...
