#!/usr/bin/python3
# all rights reserved to yyoud 2024. (c)
import sys
from uuid import UUID
from typing import Union, Literal


if sys.version_info[:2]<(3, 9):
    raise RuntimeWarning("Might not work for python versions older than 3.9")

Buffer = Union[bytes, bytearray, memoryview]
T_sb = tuple[int, int, int, int, int, int]


def process_sixbyte(
        key: Buffer,
        sixbyte: T_sb,
        token: Buffer = ...,
        base: Literal[16, 64] = ...,
        cost: int = ...,
        salt_idx: bool = ...,
        salt_size: int = ...): ...

class User:
    user_count: int
    existing_emails: set[str]
    users: dict[str, User]

    def __init__(self, username: str, email: str, password: str) -> None:
        self.warnings: list = ...
        self.logins: list = ...
        self.id: UUID = ...
        self.username: str = ...
        self.email: str = ...
        self.__counter: int = ...
        self.__hashed_password: bytes = ...
        self._countermod: int = ...
        self._banned: bool = ...
        self.bans: list = ...
        self.logged_in: bool = ...
        ...

    def __str__(self) -> str: ...

    def __eq__(self, other: object) -> bool: ...

    def __update__(self, field: str, update: str, proof: any) -> None: ...

    def _hash_password(self, password: Buffer, salting_idx: bool = ..., salt: bytes = ...) -> str: ...


    @property
    def banned(self) -> bool: ...

    @property
    def hashed_password(self) -> str: ...

    def _process_id(self) -> str: ...

    def _session_key(self, password: Buffer, mode: int) -> bytes: ...

    def new_password(self, proof: str, new_password: str) -> None: ...

    def gen_otp(self) -> str: ...



class Manager:
    managers_info: dict[str, Manager]
    banned_users: set[str]

    def __init__(self, key: Buffer, quadbyte: T_sb) -> None:
        self._key = None
        self.inspections = None
        ...

    def _verify_manager(self, key: Buffer, sixbyte: T_sb) -> bool: ...

    def inspect_user(self, key: Buffer, quadbyte: T_sb, inspected_field: str, reasoning: str, identifier: str, method: Literal["uid"] = ...) -> Union[User, None]: ...

    def ban_user(self, key: Buffer, sixbyte: T_sb, uid: str) -> None: ...

    def verify_user(self, key: Buffer, sixbyte: T_sb, idu: str, password: Buffer) -> bool: ...

    @staticmethod
    def inspection_type(inspected_field: str, reasoning: str, inspected_id: str, manager_key: str) -> tuple[str, str, UUID, str, float]: ...

    @staticmethod
    def ban_type(reasoning: str, inspected_id: str, manager_key: str) -> tuple[str, UUID, str, float]: ...
